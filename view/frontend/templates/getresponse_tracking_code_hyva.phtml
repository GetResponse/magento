<div class="getresponse-tracking-code-section" data-bind="scope: 'getresponse_tracking_code_section'"></div>
<script>

function calculateChecksum(cart) {
    const strData = JSON.stringify(cart);
    return strData.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
}

function mapCart(cart, currency) {
    if (!cart) return null;

    const price = parseFloat(cart.subtotalAmount);
    const products = (cart.items || []).map(item => {
        return {
            product: {
                id: item.product_id,
                name: item.product_name || item.name || '',
                price: item.product_price_value ? String(parseFloat(item.product_price_value)) : '0.00',
                sku: item.product_sku || '',
                vendor: item.vendor || '',
                currency
            },
            categories: (item.categories || []).map(cat => ({
                id: cat.id || '',
                name: cat.name || ''
            })),
            quantity: item.qty ? parseInt(item.qty, 10) : 1
        };
    });

    return {
        price,
        cartId: cart.cartId,
        currency,
        cartUrl: `${BASE_URL}checkout/cart/`,
        products
    };
}
const getCookie = name => {
        const match = document.cookie.match(new RegExp(`(?:^|; )${name.replace(/([.$?*|{}()[\]\\/+^])/g, '\\$1')}=([^;]*)`));
        return match ? decodeURIComponent(match[1]) : null;
    };

function onPrivateContentLoaded(sectionData) {
    const customerEmail = sectionData?.['getresponse-tracking-code']?.customerEmail ?? null;
    const currency = sectionData?.['getresponse-tracking-code']?.currency ?? null;
    const gaIsValuable = getCookie('gaIsValuable');
    if (customerEmail && gaIsValuable !== '1') {
            gaSetUserId(customerEmail);
            GrTracking('setUserId', customerEmail);
        }

    if (!sectionData?.cart) return;
    const cart = sectionData.cart;
    const currentChecksum = calculateChecksum(cart);
    const lastChecksum = parseInt(localStorage.getItem('grPayloadChecksum') || '');

    if (currentChecksum === lastChecksum) return;
    GrTracking('importScript', 'ec');
    GrTracking('cartUpdate', mapCart(cart, currency));
    localStorage.setItem('grPayloadChecksum', currentChecksum.toString())
}

if (typeof window !== 'undefined') {
    window.addEventListener('private-content-loaded', (e) => onPrivateContentLoaded(e.detail?.data));
}

const isTrackingReady = () => typeof gaSetUserId === 'function';

window.addEventListener('load', async () => {
    const initTracking = () => {
        if (!isTrackingReady()) {
            setTimeout(initTracking, 500);
            return;
        }

        dispatchEvent(new Event('reload-customer-section-data'));

        if (typeof GrViewCategoryItem !== 'undefined') {
            GrTracking('importScript', 'ec');
            GrTracking('viewCategory', GrViewCategoryItem);
        }

        if (typeof GrViewProductItem !== 'undefined') {
            GrTracking('importScript', 'ec');
            GrTracking('viewItem', GrViewProductItem);
        }

        if (typeof GrOrderPlaced !== 'undefined') {
            GrTracking('importScript', 'ec');
            GrTracking('orderPlaced', GrOrderPlaced);
        }
    };

    initTracking();
});
</script>



