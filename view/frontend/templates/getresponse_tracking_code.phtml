<div class="getresponse-tracking-code-section" data-bind="scope: 'getresponse_tracking_code_section'">
    <div id="customer-email-address" data-bind="attr: { 'customer-email': getResponseTrackingCode().customerEmail }"></div>
    <div id="tracking-code-cart" data-bind="attr: { 'cart': getResponseTrackingCode().cart }"></div>
</div>
<script>
(function () {
    function waitUntilAvailable(variableName, callback, checkInterval = 50, timeout = 5000) {
        const start = Date.now();
        (function check() {
            if (typeof window[variableName] !== 'undefined') {
                callback(window[variableName]);
            } else if (Date.now() - start < timeout) {
                setTimeout(check, checkInterval);
            } else {
                console.error(variableName + ' did not become available in time.');
            }
        })();
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        return parts.length === 2 ? parts.pop().split(';').shift() : null;
    }

    function init(customerData) {
        const isTrackingEnabled = () =>
            typeof window.gaSetUserId === 'function';

        const cartNode = document.getElementById('tracking-code-cart');
        if (cartNode) {
            new MutationObserver(mutations => {
                if (!isTrackingEnabled()) return;

                for (const mutation of mutations) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'cart') {
                        const cartAttr = cartNode.getAttribute('cart');
                        if (!cartAttr) return;

                        const cartData = JSON.parse(cartAttr);
                        if (cartData && Object.keys(cartData).length > 0) {
                            GrTracking('importScript', 'ec');
                            GrTracking('cartUpdate', cartData);
                            customerData.reload(['getresponse-tracking-code']);
                        }
                    }
                }
            }).observe(cartNode, { attributes: true });
        }

        const emailNode = document.getElementById('customer-email-address');
        if (emailNode) {
            new MutationObserver(() => {
                const email = emailNode.getAttribute('customer-email');
                const gaIsValuable = getCookie('gaIsValuable');

                if (email && isTrackingEnabled() && gaIsValuable !== '1') {
                    gaSetUserId(email);
                    GrTracking('setUserId', email);
                }
            }).observe(emailNode, { attributes: true });
        }

        window.addEventListener('load', () => {
            if (!isTrackingEnabled()) return;

            if (typeof window.GrViewCategoryItem !== 'undefined') {
                GrTracking('importScript', 'ec');
                GrTracking('viewCategory', GrViewCategoryItem);
            }

            if (typeof window.GrViewProductItem !== 'undefined') {
                GrTracking('importScript', 'ec');
                GrTracking('viewItem', GrViewProductItem);
            }

            if (typeof window.GrOrderPlaced !== 'undefined') {
                GrTracking('importScript', 'ec');
                GrTracking('orderPlaced', GrOrderPlaced);
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        waitUntilAvailable('customerData', init);
    });
})();
</script>

<script type="text/x-magento-init">
    {
        "*": {
            "Magento_Ui/js/core/app": {
                "components": {
                    "getresponse_tracking_code_section": {
                        "component": "GetResponse_GetResponseIntegration/js/getresponse_tracking_code_section"
                    }
                }
            }
        }
    }
</script>
